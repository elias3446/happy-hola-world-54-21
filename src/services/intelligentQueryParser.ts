
import { assistantActionService, ActionResult } from './assistantActionService';

export interface ParsedQuery {
  intent: string;
  action: string;
  parameters: Record<string, any>;
  confidence: number;
  naturalResponse: string;
}

export class IntelligentQueryParser {
  private static instance: IntelligentQueryParser;
  
  static getInstance(): IntelligentQueryParser {
    if (!IntelligentQueryParser.instance) {
      IntelligentQueryParser.instance = new IntelligentQueryParser();
    }
    return IntelligentQueryParser.instance;
  }

  // Sistema de prompt personalizado JARVIS
  private getJarvisSystemPrompt(): string {
    const now = new Date().toLocaleString('es-CO', { 
      timeZone: 'America/Bogota',
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    return `Eres un asistente virtual llamado JARVIS integrado en una plataforma de gesti√≥n de reportes.
Tu rol es interpretar las instrucciones y necesidades del usuario (en lenguaje natural, generalmente enviadas por WhatsApp o interfaz conversacional) y ayudarle a gestionar eficientemente todos los m√≥dulos disponibles en el sistema.

Hoy es ${now}. Zona horaria: America/Bogota (UTC-5).

Tu trabajo es asistir din√°micamente al usuario en la gesti√≥n de:

‚Ä¢ Reportes (crear, editar, buscar, filtrar, compartir, visualizar en mapa)
‚Ä¢ Usuarios (listar, crear, editar, desactivar, asignar roles)
‚Ä¢ Roles y permisos (consultar, editar, asignar)
‚Ä¢ Categor√≠as y Estados (ver, modificar, asignar)
‚Ä¢ Auditor√≠a (consultar actividades y cambios del sistema)
‚Ä¢ Dashboard Anal√≠tico (generar an√°lisis en tiempo real de Reportes, Usuarios, Roles, Categor√≠as y Estados)

Funciones inteligentes que puedes realizar:
‚Ä¢ Crear, editar o eliminar elementos en cualquiera de los m√≥dulos.
‚Ä¢ Aplicar filtros complejos o b√∫squedas espec√≠ficas (por palabra clave, fechas, estado, categor√≠a, etc.).
‚Ä¢ Mostrar visualizaciones y generar gr√°ficos (barras, pastel, l√≠nea, mapa de calor, etc.).
‚Ä¢ Realizar an√°lisis en tiempo real y brindar feedback o recomendaciones automatizadas.
‚Ä¢ Detectar anomal√≠as o patrones relevantes en la informaci√≥n.
‚Ä¢ Asistir con acciones administrativas o configuraciones del sistema.
‚Ä¢ Mantener la conversaci√≥n contextualizada (recordando los √∫ltimos 10 mensajes del usuario).

Tu respuesta debe ser clara, conversacional y directa, como si respondieras por WhatsApp o una interfaz amigable. Usa emojis si aporta naturalidad o simpat√≠a.
Si alg√∫n dato importante no est√° claro (por ejemplo, el estado del reporte o la categor√≠a), p√≠delo amablemente antes de ejecutar la acci√≥n.

No debes responder preguntas generales ni mostrar estructuras t√©cnicas o c√≥digo. No generes JSON. Solo conversaci√≥n natural y √∫til.`;
  }

  // Patrones de consulta mejorados para JARVIS
  private patterns = {
    createReport: [
      /crear.*reporte.*"([^"]+)"/i,
      /nuevo.*reporte.*"([^"]+)"/i,
      /registrar.*reporte.*"([^"]+)"/i,
      /a√±adir.*reporte.*"([^"]+)"/i,
      /reportar.*"([^"]+)"/i,
      /hay.*un.*problema.*"([^"]+)"/i
    ],
    searchReports: [
      /buscar.*reportes?.*"([^"]+)"/i,
      /mostrar.*reportes?.*"([^"]+)"/i,
      /encontrar.*reportes?.*"([^"]+)"/i,
      /listar.*reportes?.*"([^"]+)"/i,
      /reportes?.*de.*"([^"]+)"/i,
      /ver.*reportes?.*"([^"]+)"/i
    ],
    criticalReports: [
      /reportes?.*cr√≠ticos?/i,
      /reportes?.*urgentes?/i,
      /reportes?.*importantes?/i,
      /emergencias?/i,
      /prioridad.*alta/i
    ],
    weeklyReports: [
      /reportes?.*semana/i,
      /reportes?.*esta.*semana/i,
      /actividad.*semanal/i
    ],
    getStats: [
      /estad√≠sticas?/i,
      /resumen.*sistema/i,
      /an√°lisis.*general/i,
      /m√©tricas/i,
      /dashboard/i,
      /estado.*sistema/i,
      /dame.*un.*resumen/i
    ],
    showMap: [
      /mapa/i,
      /ubicaciones?/i,
      /mostrar.*en.*mapa/i,
      /ver.*mapa/i,
      /reportes.*geogr√°ficos?/i,
      /d√≥nde.*est√°n/i
    ],
    userManagement: [
      /asignar.*rol.*"([^"]+)".*a.*"([^"]+)"/i,
      /dar.*rol.*"([^"]+)".*a.*"([^"]+)"/i,
      /usuario.*"([^"]+)"/i,
      /actividad.*usuario.*"([^"]+)"/i
    ],
    categoryAnalysis: [
      /categor√≠as?.*m√°s.*frecuentes?/i,
      /gr√°fico.*categor√≠as?/i,
      /an√°lisis.*categor√≠as?/i,
      /tipos.*de.*reportes?/i
    ],
    stateAnalysis: [
      /estados?.*m√°s.*usados?/i,
      /estados?.*este.*mes/i,
      /an√°lisis.*estados?/i
    ]
  };

  async parseQuery(query: string, userId: string, userPermissions: string[]): Promise<ParsedQuery & { result?: ActionResult }> {
    const normalizedQuery = query.toLowerCase().trim();
    
    // Aplicar el prompt de JARVIS para an√°lisis contextual
    const contextualAnalysis = this.analyzeWithJarvisContext(query);
    
    // Intentar identificar la intenci√≥n con patrones espec√≠ficos
    for (const [intent, patterns] of Object.entries(this.patterns)) {
      for (const pattern of patterns) {
        const match = normalizedQuery.match(pattern);
        if (match) {
          return this.executeIntentWithJarvis(intent, match, query, userId, userPermissions);
        }
      }
    }

    // Si no se encuentra un patr√≥n espec√≠fico, usar an√°lisis contextual de JARVIS
    return this.analyzeContextualQueryWithJarvis(query, userId, userPermissions);
  }

  private analyzeWithJarvisContext(query: string): any {
    // An√°lisis contextual basado en el prompt de JARVIS
    const context = {
      isGreeting: /hola|hey|buenos|tardes|d√≠as|noches/i.test(query),
      isQuestion: /qu√©|c√≥mo|cu√°ndo|d√≥nde|por qu√©|cu√°l/i.test(query),
      isCommand: /crear|hacer|mostrar|dame|buscar|asignar/i.test(query),
      hasEmergency: /urgente|cr√≠tico|emergencia|importante/i.test(query),
      hasLocation: /direcci√≥n|ubicaci√≥n|lugar|calle|avenida/i.test(query)
    };
    
    return context;
  }

  private async executeIntentWithJarvis(
    intent: string, 
    match: RegExpMatchArray, 
    originalQuery: string, 
    userId: string, 
    userPermissions: string[]
  ): Promise<ParsedQuery & { result?: ActionResult }> {
    switch (intent) {
      case 'createReport':
        if (!userPermissions.includes('crear_reporte')) {
          return {
            intent,
            action: 'permission_denied',
            parameters: {},
            confidence: 0.9,
            naturalResponse: '‚ùå No tienes permisos para crear reportes. Habla con tu administrador para obtener los permisos necesarios.',
            result: { success: false, message: 'Permisos insuficientes' }
          };
        }
        
        const reportName = match[1];
        const result = await assistantActionService.createReport({
          nombre: reportName,
          descripcion: `Reporte creado mediante JARVIS: ${reportName}`,
          priority: 'medio'
        }, userId);
        
        return {
          intent,
          action: 'create_report',
          parameters: { nombre: reportName },
          confidence: 0.9,
          naturalResponse: result.success 
            ? `üìù ¬°Listo! He creado el reporte "${reportName}" exitosamente. ‚úÖ\n¬øDeseas agregar m√°s detalles como ubicaci√≥n o im√°genes? üì∏üìå`
            : `‚ùå Ups, no pude crear el reporte. Error: ${result.error}. ¬øIntentamos de nuevo?`,
          result
        };

      case 'criticalReports':
        const urgentResult = await assistantActionService.searchReports({
          priority: 'urgente',
          limit: 10
        });
        return {
          intent,
          action: 'search_reports',
          parameters: { priority: 'urgente' },
          confidence: 0.9,
          naturalResponse: urgentResult.success 
            ? `üö® Encontr√© ${urgentResult.data?.length || 0} reportes cr√≠ticos que requieren atenci√≥n inmediata.\n${urgentResult.data?.length > 0 ? '¬øQuieres ver los detalles de alguno en particular?' : 'Todo est√° bajo control por ahora. üëç'}`
            : `‚ùå No pude acceder a los reportes cr√≠ticos en este momento. ¬øIntentamos de nuevo?`,
          result: urgentResult
        };

      case 'weeklyReports':
        const weeklyResult = await assistantActionService.searchReports({
          limit: 20
        });
        return {
          intent,
          action: 'weekly_reports',
          parameters: {},
          confidence: 0.8,
          naturalResponse: weeklyResult.success 
            ? `üìä Esta semana se han registrado ${weeklyResult.data?.length || 0} reportes.\n¬øTe gustar√≠a ver un an√°lisis m√°s detallado o alguna categor√≠a espec√≠fica? üìà`
            : `‚ùå No pude obtener el resumen semanal. ¬øIntentamos m√°s tarde?`,
          result: weeklyResult
        };

      case 'searchReports':
        if (!userPermissions.includes('ver_reporte')) {
          return {
            intent,
            action: 'permission_denied',
            parameters: {},
            confidence: 0.9,
            naturalResponse: 'üîí No tienes permisos para ver reportes. Contacta a tu administrador.',
            result: { success: false, message: 'Permisos insuficientes' }
          };
        }

        const searchTerm = match[1];
        const searchResult = await assistantActionService.searchReports({
          search: searchTerm,
          limit: 10
        });
        
        return {
          intent,
          action: 'search_reports',
          parameters: { search: searchTerm },
          confidence: 0.9,
          naturalResponse: searchResult.success 
            ? `üîç Encontr√© ${searchResult.data?.length || 0} reportes relacionados con "${searchTerm}".\n${searchResult.data?.length > 0 ? '¬øTe muestro los detalles de alguno espec√≠fico?' : 'No hay resultados para esa b√∫squeda. ¬øProbamos con otros t√©rminos?'}`
            : `‚ùå Error en la b√∫squeda: ${searchResult.error}. ¬øIntentamos con otra palabra clave?`,
          result: searchResult
        };

      case 'getStats':
        const statsResult = await assistantActionService.getSystemStats();
        return {
          intent,
          action: 'get_stats',
          parameters: {},
          confidence: 0.8,
          naturalResponse: statsResult.success 
            ? `üìä Aqu√≠ tienes el resumen del sistema:\n‚Ä¢ ${statsResult.data?.reportes} reportes registrados üìù\n‚Ä¢ ${statsResult.data?.usuarios} usuarios activos üë•\n‚Ä¢ ${statsResult.data?.categorias} categor√≠as disponibles üìÇ\n¬øNecesitas an√°lisis m√°s espec√≠ficos? üìà`
            : `‚ùå No pude obtener las estad√≠sticas: ${statsResult.error}`,
          result: statsResult
        };

      case 'showMap':
        const mapResult = await assistantActionService.getReportsByLocation();
        return {
          intent,
          action: 'show_map',
          parameters: {},
          confidence: 0.8,
          naturalResponse: mapResult.success 
            ? `üó∫Ô∏è He encontrado ${mapResult.data?.length || 0} reportes con ubicaci√≥n en el mapa.\n¬øQuieres filtrar por alguna zona espec√≠fica? üìç`
            : `‚ùå Error al cargar el mapa: ${mapResult.error}`,
          result: mapResult
        };

      case 'categoryAnalysis':
        const categoryStats = await assistantActionService.generateAnalysisReport();
        return {
          intent,
          action: 'category_analysis',
          parameters: {},
          confidence: 0.8,
          naturalResponse: categoryStats.success 
            ? `üìä An√°lisis de categor√≠as completado.\n¬øTe muestro el gr√°fico detallado de las m√°s frecuentes? üìà`
            : `‚ùå No pude generar el an√°lisis de categor√≠as: ${categoryStats.error}`,
          result: categoryStats
        };

      default:
        return this.getJarvisGenericResponse(originalQuery);
    }
  }

  private async analyzeContextualQueryWithJarvis(query: string, userId: string, userPermissions: string[]): Promise<ParsedQuery & { result?: ActionResult }> {
    const lowercaseQuery = query.toLowerCase();
    const context = this.analyzeWithJarvisContext(query);
    
    // Saludo inicial
    if (context.isGreeting) {
      return {
        intent: 'greeting',
        action: 'welcome',
        parameters: {},
        confidence: 0.9,
        naturalResponse: `¬°Hola! üëã Soy JARVIS, tu asistente virtual para la gesti√≥n de reportes.\n\n¬øEn qu√© puedo ayudarte hoy? Puedo:\n‚Ä¢ üìù Crear o buscar reportes\n‚Ä¢ üë• Gestionar usuarios y roles\n‚Ä¢ üìä Generar an√°lisis y estad√≠sticas\n‚Ä¢ üó∫Ô∏è Mostrar ubicaciones en el mapa\n\n¬°Solo dime qu√© necesitas!`
      };
    }

    // An√°lisis contextual mejorado
    if (lowercaseQuery.includes('reporte') && lowercaseQuery.includes('cu√°ntos')) {
      const statsResult = await assistantActionService.getSystemStats();
      return {
        intent: 'count_reports',
        action: 'get_stats',
        parameters: {},
        confidence: 0.8,
        naturalResponse: statsResult.success 
          ? `üìä Actualmente tenemos ${statsResult.data?.reportes} reportes en el sistema.\n¬øTe gustar√≠a ver m√°s detalles o alg√∫n an√°lisis espec√≠fico? üìà`
          : `‚ùå No pude obtener el conteo: ${statsResult.error}`,
        result: statsResult
      };
    }

    if (context.hasEmergency) {
      const urgentResult = await assistantActionService.searchReports({
        priority: 'urgente',
        limit: 10
      });
      return {
        intent: 'urgent_reports',
        action: 'search_reports',
        parameters: { priority: 'urgente' },
        confidence: 0.9,
        naturalResponse: urgentResult.success 
          ? `üö® Tengo ${urgentResult.data?.length || 0} reportes urgentes que requieren atenci√≥n.\n¬øRevisamos los m√°s cr√≠ticos primero?`
          : `‚ùå Error al buscar reportes urgentes: ${urgentResult.error}`,
        result: urgentResult
      };
    }

    return this.getJarvisGenericResponse(query);
  }

  private getJarvisGenericResponse(query: string): ParsedQuery {
    return {
      intent: 'general_inquiry',
      action: 'provide_help',
      parameters: { originalQuery: query },
      confidence: 0.4,
      naturalResponse: `ü§î Hmm, no estoy seguro de entender exactamente lo que necesitas con "${query}".\n\n¬øPodr√≠as ser m√°s espec√≠fico? Por ejemplo:\n‚Ä¢ "Crear reporte de bache en la Av. Am√©rica" üìù\n‚Ä¢ "Mostrar reportes cr√≠ticos de esta semana" üö®\n‚Ä¢ "Dame estad√≠sticas del sistema" üìä\n‚Ä¢ "Asignar rol supervisor a Juan" üë•\n\n¬°Estoy aqu√≠ para ayudarte! üòä`
    };
  }
}

export const intelligentQueryParser = IntelligentQueryParser.getInstance();
